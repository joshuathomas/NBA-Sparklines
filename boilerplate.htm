<!DOCTYPE html>
<html>
    <head>
        <script src="plotly_02_01_2020.min.js"></script>
        <script src="jquery-3.4.1.min.js"></script>
        <script src="jsonQ.min.js"></script>
        <!--
        
        -->

    </head>
    <style>
        .lf{
            float: left;
        }
    </style>
    <body>
        <!-- this should be the smaller version -->
        <div>
            <div id="gameQ1" class="lf" style="width:300px;height:600px;"></div>
            <div id="gameQ2" class="lf" style="width:300px;height:600px;"></div>
            <div id="gameQ3" class="lf" style="width:300px;height:600px;"></div>
            <div id="gameQ4" class="lf" style="width:300px;height:600px;"></div>
        </div>

    </body>

    <script>
        // https://stackoverflow.com/questions/10893613/how-can-i-convert-time-to-decimal-number-in-javascript
        // this just shows how lazy I am
        function timeStringToFloat(time)
        {
            var minSecTenths = time.split(/[.:]/);
            var min = parseInt(minSecTenths[0], 10);
            var sec = parseInt(minSecTenths[1], 10);
            var tenths = minSecTenths[2] ? parseInt(minSecTenths[1], 10) : 0;
            
            //you only want to go to 3 decimal places
            return (min + ( sec / 60 ) + ( tenths / 600 )).toFixed(4);
        }
        /*
            This function is used to print out the lead changes provided by the 4 indivdual json files
            pass it the score object and the box score 
        */
        function printOutQuarterScore(qScore, boxScore)
        {
            var qCurrentScore = qScore[0].plays;
            var xVal = new Array();
            var yVal = new Array();
            
            //you want the x to be the time - comma - then the score!
            qCurrentScore.forEach(function(value, index){

                //build 2 arrays
                xVal.push(-timeStringToFloat(value.clock));

                if(value.leadTeamId == boxScore.basicGameData.hTeam.teamId){
                    //xVal.push(timeStringToFloat(value.clock));
                    yVal.push(parseInt(value.points));
                    //console.log(xVal + ", " + yVal);
                    //console.log(timeStringToFloat(value.clock) + ", -" + value.points);

                }else if(value.leadTeamId == boxScore.basicGameData.vTeam.teamId){
                    //console.log(timeStringToFloat(value.clock) + ", " + value.points);
                    //xVal.push(timeStringToFloat(value.clock));
                    yVal.push(parseInt("-" + value.points));
                    //console.log(xVal + ", " + yVal);
                }
                else{
                    //it's tied back up
                    //console.log(timeStringToFloat(value.clock) + ", " + value.points);
                    //
                    yVal.push(parseInt(value.points));
                    //console.log(xVal + ", " + yVal);
                }
            });
            return [xVal, yVal];

            /*
            qCurrentScore.forEach(function(value, index){
                //console.log("what is the value from inside: " + value.points + " clock: " + value.clock + " in: " + index);
                if(value.leadTeamId == boxScore.basicGameData.hTeam.teamId){
                    console.log("P: -" + value.points + " time: " + value.clock + " " + boxScore.basicGameData.hTeam.triCode + " [H]");

                }else if(value.leadTeamId == boxScore.basicGameData.vTeam.teamId){
                    console.log("P: " + value.points + " time: " + value.clock + " " + boxScore.basicGameData.vTeam.triCode + " [V]");
                }
                else{
                    //it's tied back up
                    console.log("P: " + value.points + " time: " + value.clock);
                }
        
            });//end forEach
            */

        }//end printOutQuarterScore


        


        /*
            Let's try and access the local files data
        */
        // It's 2020!
        // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
        // https://developers.google.com/web/updates/2015/03/introduction-to-fetch#response_types
        // This is the answer - cors and "opaque" responses!!!
        // https://stackoverflow.com/a/45697474
        var requestDate = "20200131";

        fetch("./nba_json_data/scoreboard_" + requestDate + ".json",
        {
            method: 'GET', // *GET, POST, PUT, DELETE, etc.
            mode: 'cors', // no-cors, *cors, same-origin
            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
            credentials: 'omit', // include, *same-origin, omit
            headers: { 'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded'
            }
        })
        .then(response => response.json())
        .then(
            function(response)
            {
                //data => console.log(data)
                var todaysGames = jsonQ(response);
                //to find all the name
                var gameIds = todaysGames.find('gameId');

                //now we're going to branch out and make the other requests

            gameIds.each(
                function (index, path, value) {
                    //console.log("value: " + value + " index: " + index + " path: " + path);
                    //we have to build the request - one main file and 4 quarters
                    
                    
                    //I need to build a new json object that has the data i need

                    var gameBoxScore;

                    var gameBoxScoreRequest = $.ajax("./nba_json_data/" + value + "_boxscore.json", {})
                    .done(function(data){

                        /*
                        //console.log(jsonQ(data).value());
                        gameBoxScore = data;
                        console.log(
                        //gameBoxScore.basicGameData.hTeam.teamId
                        gameBoxScore.basicGameData.vTeam.triCode + " (" + gameBoxScore.basicGameData.vTeam.win + "-" +
                        gameBoxScore.basicGameData.vTeam.loss + ") " + gameBoxScore.basicGameData.vTeam.score
                        + " at " +
                        //gameBoxScore.basicGameData.hTeam.teamId
                        gameBoxScore.basicGameData.hTeam.triCode + " (" + gameBoxScore.basicGameData.hTeam.win + "-" +
                        gameBoxScore.basicGameData.hTeam.loss + ") " + gameBoxScore.basicGameData.hTeam.score
                        
                        );
                        */
                    });
                    //console.log("./nba_json_data/" + value + "_lead_tracker_1.json");
                    
                    // this is occasionally failing as it's not waiting for the gameBoxScore variable
                    // the following talks about some strategies for overcoming it
                    // https://medium.com/coding-design/writing-better-ajax-8ee4a7fb95f

                    gameBoxScoreRequest.then(function(data){

                        // I have to chain all these together
                        // or better yet, wait until their all done 


                        gameBoxScore = data;
                        
                        // ---------------------------------------------------------------
                        // Q1
                        // ---------------------------------------------------------------
                        var q1Request = $.ajax("./nba_json_data/" + value + "_lead_tracker_1.json")
                        .done(function(data){
                                //console.log("q1 request from inside");



                                /* //this is what you commented out to wrap all of them together

                                var q1Score = data.plays;

                                //this is an array of objects
                                //console.log(q1Score);
                                
                                // this function need to be broken out and the gameBoxScore variable passed over to it
                                // I'm just goning to cheese it and duplicate it like a buster

                                q1Score.forEach(function(value, index){
                                    //console.log("what is the value from inside: " + value.points + " clock: " + value.clock + " in: " + index);
                                    if(value.leadTeamId == gameBoxScore.basicGameData.hTeam.teamId){
                                        console.log(gameBoxScore.basicGameData.hTeam.triCode + " [H] -" + value.points + " time: " + value.clock);

                                    }else if(value.leadTeamId == gameBoxScore.basicGameData.vTeam.teamId){
                                        console.log(gameBoxScore.basicGameData.vTeam.triCode + " [V] " + value.points + " time: " + value.clock);
                                    }
                                    else{
                                    //it's tied back up
                                    console.log("P: " + value.points + " time: " + value.clock);
                                    }
                                
                            });
                            */ //this is what you commented out to wrap all of them together
                            /*
                            */
                        
                            //console.log(q1Score.plays);
                            //console.log(jsonQ(data).value());
                        });
                        // ---------------------------------------------------------------
                        // Q2
                        // ---------------------------------------------------------------
                        var q2Request = $.ajax("./nba_json_data/" + value + "_lead_tracker_2.json")
                        .done(function(data){
                            //console.log("q2 request from inside");

                            /* //this is what you commented out to wrap all of them together
                            var q2Score = data.plays;

                            //this is an array of objects
                            //console.log(q1Score);
                            
                            // this function need to be broken out and the gameBoxScore variable passed over to it
                            // I'm just goning to cheese it and duplicate it like a buster
                            
                            q2Score.forEach(function(value, index){
                                //console.log("what is the value from inside: " + value.points + " clock: " + value.clock + " in: " + index);
                                if(value.leadTeamId == gameBoxScore.basicGameData.hTeam.teamId){
                                    console.log("Q2 " + gameBoxScore.basicGameData.hTeam.triCode + " [H] -" + value.points + " time: " + value.clock);

                                }else if(value.leadTeamId == gameBoxScore.basicGameData.vTeam.teamId){
                                    console.log("Q2 " + gameBoxScore.basicGameData.vTeam.triCode + " [V] " + value.points + " time: " + value.clock);
                                }
                                else{
                                //it's tied back up
                                console.log("Q2 P: " + value.points + " time: " + value.clock);
                                }
                            
                            });
                            
                        
                            //console.log(q2Score.plays);
                            //console.log(jsonQ(data).value());
                            */ //this is what you commented out to wrap all of them together
                            

                        });
                        // ---------------------------------------------------------------
                        // Q3
                        // ---------------------------------------------------------------
                        var q3Request = $.ajax("./nba_json_data/" + value + "_lead_tracker_3.json")
                        .done(function(data){
                            //console.log(jsonQ(data).value());
                            //console.log("q3 request from inside");
                        });
                        // ---------------------------------------------------------------
                        // Q4
                        // ---------------------------------------------------------------
                        var q4Request = $.ajax("./nba_json_data/" + value + "_lead_tracker_4.json")
                        .done(function(data){
                            //console.log(jsonQ(data).value());
                            //console.log("q4 request from inside");
                        });
                        // ---------------------------------------------------------------
                    
                    
                        $.when(q1Request, q2Request, q3Request, q4Request)
                        .done(                           
                            function(q1Obj, q2Obj, q3Obj, q4Obj){

                                console.log(
                                    //gameBoxScore.basicGameData.hTeam.teamId
                                    gameBoxScore.basicGameData.vTeam.triCode + " (" + gameBoxScore.basicGameData.vTeam.win + "-" +
                                    gameBoxScore.basicGameData.vTeam.loss + ") " + gameBoxScore.basicGameData.vTeam.score
                                    + " at " +
                                    //gameBoxScore.basicGameData.hTeam.teamId
                                    gameBoxScore.basicGameData.hTeam.triCode + " (" + gameBoxScore.basicGameData.hTeam.win + "-" +
                                    gameBoxScore.basicGameData.hTeam.loss + ") " + gameBoxScore.basicGameData.hTeam.score
                                );
                                console.log("---------------------------------------------");

                                //console.log("Q1 -----------------------------");
                                var q1XY = printOutQuarterScore(q1Obj, gameBoxScore);
                                //console.log("Q2 -----------------------------");
                                var q2XY = printOutQuarterScore(q2Obj, gameBoxScore);
                                //console.log("Q3 -----------------------------");
                                var q3XY = printOutQuarterScore(q3Obj, gameBoxScore);
                                //console.log("Q4 -----------------------------");
                                var q4XY = printOutQuarterScore(q4Obj, gameBoxScore);

                                //Fuck - I forgot all about overtime!!!!!!!!!!!


                                GAMEDIVQ1 = document.getElementById('gameQ1');
                                GAMEDIVQ2 = document.getElementById('gameQ2');
                                GAMEDIVQ3 = document.getElementById('gameQ3');
                                GAMEDIVQ4 = document.getElementById('gameQ4');

                                var layout = {
                    
                                    xaxis: {
                                        range: [-12, 0],
                                        zeroline: false,
                                        showgrid: false
                                    },
                                    yaxis: {
                                        range: [-25, 25],
                                        showticklabels: false,
                                        type: "linear", //  "-" | "linear" | "log" | "date" | "category" | "multicategory"
                                        autorange: false,
                                        dtick: 5,                                        
                                        zerolinewidth: 4,
                                        autotick: false,
                                        showgrid: true
                                    }
                                };
                                console.log(q1XY[0]);
                                console.log(q1XY[1]);

                                Plotly.newPlot( GAMEDIVQ1, [{
                                    x: q1XY[0],
                                    y: q1XY[1] }], layout );

                                Plotly.newPlot( GAMEDIVQ2, [{
                                    x: q2XY[0],
                                    y: q2XY[1] }], layout );
                                
                                Plotly.newPlot( GAMEDIVQ3, [{
                                    x: q3XY[0],
                                    y: q3XY[1] }], layout );

                                Plotly.newPlot( GAMEDIVQ4, [{
                                    x: q4XY[0],
                                    y: q4XY[1] }], layout );
                                /*
                                //this is some kind of jquery object
                                var q1Score = q1Obj[0].plays;

                                //let's just take it one step at a time before we start to get clever
                                //I want one function that I can pass each value to that prints out what I want
                                q1Score.forEach(function(value, index){
                                    //console.log("what is the value from inside: " + value.points + " clock: " + value.clock + " in: " + index);
                                    if(value.leadTeamId == gameBoxScore.basicGameData.hTeam.teamId){
                                        console.log("P: -" + value.points + " time: " + value.clock + " " + gameBoxScore.basicGameData.hTeam.triCode + " [H]");

                                    }else if(value.leadTeamId == gameBoxScore.basicGameData.vTeam.teamId){
                                        console.log("P: " + value.points + " time: " + value.clock + " " + gameBoxScore.basicGameData.vTeam.triCode + " [V]");
                                    }
                                    else{
                                    //it's tied back up
                                    console.log("P: " + value.points + " time: " + value.clock);
                                    }
                                
                                });
                                */
                                    

                        });//end when
                    
                    
                    
                    
                });//then finished
            });
            //to print list of all name
            //console.log(gameIds.value());

        
        });
        
        
        /*
        then(function(response) {
            console.log("is there something: " + response.json + " ok " + response.ok);
            //response.json();   
        });
        
        
        var gamesByDate = $.ajax({url: "http://data.nba.net/prod/v2/20200131/scoreboard.json", })
        .then(function(data) {});
        
        .done(
            //console.log(gamesByDate)
        );
        */

    </script>

    <!-- 
        <script src="./nba_json_data/0021900720_boxscore.json"></script>
        <script src="./nba_json_data/0021900720_lead_tracker_1.json"></script>
        <script src="./nba_json_data/0021900720_lead_tracker_2.json"></script>
        <script src="./nba_json_data/0021900720_lead_tracker_3.json"></script>
        <script src="./nba_json_data/0021900720_lead_tracker_4.json"></script>
    -->
    <script>
        
        //GAMEDIVQ1 = document.getElementById('gameQ1');
        //GAMEDIVQ2 = document.getElementById('gameQ2');

        var layout = {
            //title: 'Volume of Apple Shares Traded',
            //https://plot.ly/javascript/reference/#layout-xaxis
            xaxis: {
                range: [-12, 0],
                //title: 'AXIS TITLE',
                /*
                titlefont: {
                    family: 'Arial, sans-serif',
                    size: 18,
                    color: 'lightgrey'
                },*/
                //autotick: false,
                //showticklabels: true,
                //tickangle: 'auto',
                /*
                tickfont: {
                    family: 'Old Standard TT, serif',
                    size: 14,
                    color: 'black'
                },*/
                //exponentformat: 'e',
                //showexponent: 'all',
                //ticks: 'outside',
                //tick0: 0,
                //dtick: 1,
                //ticklen: 12,
                //tickwidth: 4,
                //tickcolor: '#000',
                zeroline: false,
                //showline: true,
                //zerolinecolor: '#969696',
                showgrid: false
            },
            //https://plot.ly/javascript/reference/#layout-yaxis
            yaxis: {
                range: [-25, 25],
                //title: 'AXIS TITLE',
                /*
                titlefont: {
                    family: 'Arial, sans-serif',
                    size: 18,
                    color: 'lightgrey'
                },*/
                showticklabels: false,
                type: "linear", //  "-" | "linear" | "log" | "date" | "category" | "multicategory"
                autorange: false,
                dtick: 5,
                //tickangle: 45,
                
                zerolinewidth: 4,
                autotick: false,
                showgrid: true
                //ticks: 'outside',
                //tick0: 0,
                //dtick: 1,
                //ticklen: 25,
                //tickwidth: 4,
                //tickcolor: '#333'
            }
        };
        // https://plot.ly/javascript/axes/
        /*
        Plotly.newPlot( GAMEDIVQ1, [{
        x: [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0],
        y: [-10, -3, -4, -6, -9, -11, 0, 1, 2, 4, 8, 16, 2] }], layout );

        Plotly.newPlot( GAMEDIVQ2, [{
        x: [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0],
        y: [-10, -3, -4, -6, -9, -11, 0, 1, 2, 4, 8, 16, 2] }], layout );
        */
        /* Current Plotly.js version */
        //console.log( Plotly.BUILD );
    </script>
    
</html>